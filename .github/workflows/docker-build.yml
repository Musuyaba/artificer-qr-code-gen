name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Before Run Copy .env
        run: cp .env.example .env

      - name: Extract Version from .env
        id: setup
        run: |
          export VERSION=$(grep 'APP_VERSION=' .env | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

  determine_version:
    runs-on: ubuntu-latest
    needs: setup

    outputs:
      NEXT_VERSION: ${{ steps.determine_version.outputs.NEXT_VERSION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Set Git user information
        run: |
          git config user.email "musuyaba@gmail.com"
          git config user.name "Musuyaba Runner"

      - name: Determine the next version
        id: determine_version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --abbrev=0 --tags || echo "v1.0-202312081403")
          MAJOR_VERSION=$(echo "${{ needs.setup.outputs.VERSION }}")
          MINOR_VERSION=$(echo "$LAST_TAG" | sed -n 's/.*\.\([0-9]\+\)-.*/\1/p')
          NEXT_VERSION="$MAJOR_VERSION.$((MINOR_VERSION + 1))-$(date +'%Y%m%d%H%M')"
          echo "NEXT_VERSION=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
          echo "MINOR_VERSION=$MINOR_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION"

  release:
    runs-on: ubuntu-latest
    needs: [setup, determine_version]
    outputs:
      CHANGELOG: ${{ steps.release_notes.outputs.CHANGELOG }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
          
      - name: Set Git user information
        run: |
          git config user.email "musuyaba@gmail.com"
          git config user.name "Musuyaba Runner"
  
      - name: Create Git tag
        if: success()
        run: |
          git tag -a ${{ needs.determine_version.outputs.NEXT_VERSION }} -m "Release ${{ needs.determine_version.outputs.NEXT_VERSION }}"
      
      - name: Push Git tag
        id: release_notes
        if: success()
        run: |
          git push -u origin ${{ needs.determine_version.outputs.NEXT_VERSION }}
          echo "Waiting for tag to become available in remote repository... ${{ needs.determine_version.outputs.NEXT_VERSION }}"
          while ! (git fetch --tags --all --force && git tag -l | grep ${{ needs.determine_version.outputs.NEXT_VERSION }})
          do
            sleep 5
          done
          chmod +x generate_changelog.sh
          CHANGELOG=$(./generate_changelog.sh)
          echo "::set-output name=CHANGELOG::${CHANGELOG}"
        shell: bash       

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          tag: ${{ needs.determine_version.outputs.NEXT_VERSION }}
          name: Release ${{ needs.determine_version.outputs.NEXT_VERSION }}
          body: ${{ steps.release_notes.outputs.CHANGELOG }}
          draft: false
          prerelease: false
      

  build_and_push_docker:
    runs-on: ubuntu-latest
    needs: [setup, determine_version, release]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Before Run Copy .env
        run: cp .env.example .env
        
      - name: Build and Push Docker Image
        run: |
          REPO_OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          docker compose build aio
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:latest ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:latest ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:${{ needs.determine_version.outputs.NEXT_VERSION }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:latest ghcr.io/${REPO_OWNER_LOWER}/${{ vars.DOCKER_AIO_REPO }}:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:latest ghcr.io/${REPO_OWNER_LOWER}/${{ vars.DOCKER_AIO_REPO }}:${{ needs.determine_version.outputs.NEXT_VERSION }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_AIO_REPO}}:${{ needs.determine_version.outputs.NEXT_VERSION }}
          docker push ghcr.io/${REPO_OWNER_LOWER}/${{vars.DOCKER_AIO_REPO}}:latest
          docker push ghcr.io/${REPO_OWNER_LOWER}/${{vars.DOCKER_AIO_REPO}}:${{ needs.determine_version.outputs.NEXT_VERSION }}
        env:
          DOCKER_BUILDKIT: 1